import telebot
from telebot import types
import sqlite3
from sqlite3 import Error
from tabulate import tabulate
from datetime import date
import random


bot = telebot.TeleBot('6885948940:AAGD89B0_Wjs3BCkyJ7s-0jXuKn7GCWkMZ8')

surname = ' '

# –∑–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–¥–µ—Ç —é–∑–µ—Ä
@bot.message_handler(content_types=['text'])
def start(message):
    text = message.text

    try:
        connection = sqlite3.connect(r"QueueDatabase.db")
    except Error as e:
        bot.send_message(message.from_user.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤')
        return
        
    
    result = connection.execute(f'select ID from UserTable where ID = { message.from_user.id };')
    connection.close

    if result.fetchall().__len__() != 0 and text == '/start': # if user with this id already exists 
        bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        bot.register_next_step_handler(message, menu(message)) # redirect to (main) menu
    elif text == '/start':
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")
        bot.register_next_step_handler(message, get_surname) #—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_surname
    else:
        bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω ü§®')


def get_surname(message):
    surname = message.text

    try:
        connection = sqlite3.connect(r"QueueDatabase.db")
        connection.execute(f"""
            insert into UserTable(ID, Surname)
            values({ message.from_user.id }, '{surname}');
        """)
        connection.commit()
        connection.close
    except Error as e:
        bot.send_message(message.from_user.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤')
        return

    bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


def menu(message):
    keyboard = types.InlineKeyboardMarkup(); #–Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    on_record_key = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–¥–∞—á—É', callback_data='on_record') #–∫–Ω–æ–ø–∫–∞
    keyboard.add(on_record_key) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    on_delete_key= types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏', callback_data='on_delete')
    keyboard.add(on_delete_key)

    on_output_key= types.InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏', callback_data='on_output')
    keyboard.add(on_output_key)

    question = '–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å–æ –º–Ω–æ–π:'
    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "on_record":
        bot.register_next_step_handler(call.message, register_to_queue(call))

    elif call.data == "on_delete":
        print('—Ç—É—Ç –µ–≥–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç')
    elif call.data == "on_output":
        print('—Ç—É—Ç –¥–∞—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        bot.register_next_step_handler(call.message, DisplayQueue(call.message))




#–í—ã–≤–æ–¥ –æ—á–µ—Ä–µ–¥–∏
def DisplayQueue(message):
    users_info = [] #—Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å–¥–∞—é—â–∏—Ö –ª–∞–±—É

    try:
        connection = sqlite3.connect(r"QueueDatabase.db")
    except Error as e:
        bot.send_message(message.chat.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤')
        return

    current_date = date.today()  # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    current_date_str = current_date.strftime("%Y-%m-%d")
    result = connection.execute(f'SELECT * FROM LabTable WHERE LabDate = {}', ) # –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å current_date

    #—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–¥
    users = connection.execute(f'SELECT * FROM UserTable')
    record = connection.execute(f'SELECT * FROM Record')
    result = connection.execute(f'SELECT * FROM LabTable')
    record_lab = record.fetchall()
    users_lab = users.fetchall()
    lab = result.fetchall()

    #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É —Å–¥–∞–≤–∞–µ–º–æ–π –ª–∞–±—ã
    record_dict = {}
    for fixation in record_lab:
        recId = fixation[0]
        recUserId = fixation[1]
        recLabId = fixation[2]
        recLabsCount = fixation[3]

        if recLabId in record_dict:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª—é—á –≤ —Å–ª–æ–≤–∞—Ä–µ
            record_dict[recLabId].append((recUserId, recLabsCount))  # –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ –∫–ª—é—á—É recLabId
        else:
            record_dict[recLabId] = [(recUserId, recLabsCount)]

    for recLabId, values in record_dict.items():  #–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤–∞—Ä—è —Å –ª–∞–±–∞–º–∏
        for lr in lab:
            lab_id = lr[0]
            lab_name = lr[1]
            group_number = lr[2]
            lab_date = lr[3]

            if recLabId == lab_id: #—Å—á–∏—Ç—ã–≤–∞–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–∞–±–µ –ø–æ ID
                for recUserId, recLabsCount in values:
                    lab_info = f"{lab_name}\t –ì—Ä—É–ø–ø–∞: {group_number}\t–î–∞—Ç–∞: {lab_date}"

                    for us in users_lab: #—Å—á–∏—Ç—ã–≤–∞–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —é–∑–µ—Ä–∞—Ö –ø–æ ID
                        UsId = us[0]
                        UsSurname = us[1]
                        if recUserId == UsId:
                            users_info.append(UsSurname) # + —Ñ–∞–º–∏–ª–∏—è –≤ —Å–ø–∏—Å–æ–∫

                #—Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–¥–µ–Ω–∏–µ
                unique_users_info = list(set(users_info))  # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                random.shuffle(unique_users_info)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
                users_list = "\n".join([f"{i + 1}. {surname}" for i, surname in enumerate(unique_users_info)])
                #–≤—ã–≤–æ–¥
                if lab_info is not None:
                    bot.send_message(message.chat.id, lab_info + "\n\n" + users_list)



def register_to_queue(call):
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:')

    try:
        connection = sqlite3.connect(r"QueueDatabase.db")
    except Error as e:
        bot.send_message(call.message.chat.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤')
        return

    result = connection.execute(f'select * from LabTable;')
    labs_list = result.fetchall()


    subject_info = """
| ID | –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ | –ü–æ–¥–≥—Ä—É–ø–ø–∞ |
===================================
"""

    for i in range(len(labs_list)):
        subject_info += f"| {labs_list[i][0]: <{3}}"
        subject_info += f"| {labs_list[i][1]: <{30}}|"
        subject_info += f" {labs_list[i][2]: ^{10}}|\n"
        #print(subject_info)
    bot.send_message(call.message.chat.id, subject_info)


bot.polling(none_stop=True, interval=0)



import telebot
from telebot import types
import sqlite3
from sqlite3 import Error
from tabulate import tabulate
from datetime import datetime
import random
import time

bot = telebot.TeleBot('6885948940:AAGD89B0_Wjs3BCkyJ7s-0jXuKn7GCWkMZ8')

surname = ' '
FinishLab = {}  #–≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏—Å—å


# –∑–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–¥–µ—Ç —é–∑–µ—Ä
@bot.message_handler(content_types=['text'])
def start(message):
    text = message.text

    try:
        connection = sqlite3.connect(r"QueueDatabase.db")
    except Error as e:
        bot.send_message(message.from_user.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤')
        return

    result = connection.execute(f'select ID from UserTable where ID = {message.from_user.id};')
    connection.close

    if result.fetchall().__len__() != 0 and text == '/start':  # if user with this id already exists
        bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        bot.register_next_step_handler(message, menu(message))  # redirect to (main) menu
    elif text == '/start':
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")
        bot.register_next_step_handler(message, get_surname)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_surname
    else:
        bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω ü§®')


def get_surname(message):
    surname = message.text

    try:
        connection = sqlite3.connect(r"QueueDatabase.db")
        connection.execute(f"""
            insert into UserTable(ID, Surname)
            values({message.from_user.id}, '{surname}');
        """)
        connection.commit()
        connection.close
    except Error as e:
        bot.send_message(message.from_user.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤')
        return

    bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


def menu(message):
    keyboard = types.InlineKeyboardMarkup();  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    on_record_key = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–¥–∞—á—É', callback_data='on_record')  # –∫–Ω–æ–ø–∫–∞
    keyboard.add(on_record_key)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    on_delete_key = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏', callback_data='on_delete')
    keyboard.add(on_delete_key)

    on_output_key = types.InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏', callback_data='on_output')
    keyboard.add(on_output_key)

    question = '–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å–æ –º–Ω–æ–π:'
    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "on_record":
        bot.register_next_step_handler(call.message, register_to_queue(call))

    elif call.data == "on_delete":
        print('—Ç—É—Ç –µ–≥–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç')
    elif call.data == "on_output":
        print('—Ç—É—Ç –¥–∞—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        bot.register_next_step_handler(call.message, DisplayQueue(call.message))


# –í—ã–≤–æ–¥ –æ—á–µ—Ä–µ–¥–∏

def DisplayQueue(message):
    current_time = time.strftime("%H:%M", time.localtime())  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
    users_info = []  # —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å–¥–∞—é—â–∏—Ö –ª–∞–±—É
    checkLab = {}

    try:
        connection = sqlite3.connect(r"QueueDatabase.db")
    except Error as e:
        bot.send_message(message.chat.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤')
        return

    # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–¥
    users = connection.execute(f'SELECT * FROM UserTable')
    record = connection.execute(f'SELECT * FROM Record')
    result = connection.execute(f'SELECT * FROM LabTable')
    record_lab = record.fetchall()
    users_lab = users.fetchall()
    lab = result.fetchall()

    # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É —Å–¥–∞–≤–∞–µ–º–æ–π –ª–∞–±—ã
    record_dict = {}
    dictionaryLab = {}
    for fixation in record_lab:
        recId = fixation[0]
        recUserId = fixation[1]
        recLabId = fixation[2]
        recLabsCount = fixation[3]

        if recLabId in record_dict:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–ª—é—á –≤ —Å–ª–æ–≤–∞—Ä–µ
            record_dict[recLabId].append(
                (recUserId, recLabsCount))  # –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ –∫–ª—é—á—É recLabId
        else:
            record_dict[recLabId] = [(recUserId, recLabsCount)]

    # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ –ª–∞–±—ã –∏ –≤—ã–≤–æ–¥

    for recLabId, values in record_dict.items():  # –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤–∞—Ä—è —Å –ª–∞–±–∞–º–∏
        for lr in lab:
            lab_id = lr[0]
            lab_name = lr[1]
            group_number = lr[2]
            lab_date = lr[3]
            lab_time = lr[4]
            if lab_time < current_time:
                if recLabId == lab_id:  # —Å—á–∏—Ç—ã–≤–∞–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–∞–±–µ –ø–æ ID
                    for recUserId, recLabsCount in values:
                        lab_info = f"{lab_name}\t –ì—Ä—É–ø–ø–∞: {group_number}\t–î–∞—Ç–∞: {lab_date}"

                        # —Å—á–∏—Ç—ã–≤–∞–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —é–∑–µ—Ä–∞—Ö –ø–æ ID
                        for us in users_lab:
                            UsId = us[0]
                            UsSurname = us[1]
                            if recUserId == UsId:
                                users_info.append(UsSurname)  # + —Ñ–∞–º–∏–ª–∏—è –≤ —Å–ø–∏—Å–æ–∫

                    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –≤ –≥–ª–æ–±–∞–ª.—Å–ª–æ–≤–∞—Ä–µ
                    if (lab_name, group_number, lab_date, lab_time) in FinishLab:
                        users_list = FinishLab[(lab_name, group_number, lab_date, lab_time)]
                    else:
                        # —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–¥–µ–Ω–∏–µ
                        unique_users_info = list(set(users_info))  # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                        random.shuffle(unique_users_info)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
                        users_list = "\n".join([f"{i + 1}. {surname}" for i, surname in enumerate(unique_users_info)])
                        FinishLab[(lab_name, group_number, lab_date, lab_time)] = [(users_list)]
                        users_list = []
                        users_info = []
                    # –≤—ã–≤–æ–¥
                    if lab_info is not None:
                        key = (lab_name, group_number, lab_date, lab_time)
                        lab_info = f'{lab_name}  –ì—Ä—É–ø–ø–∞: {group_number}\t –î–∞—Ç–∞: {lab_date}'
                        users_list = '\n'.join([f'{i + 1}. {user}' for i, user in enumerate(FinishLab[key])])[3:]
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        bot.send_message(chat_id="-4036713338", text=lab_info + '\n' + users_list)

            else:
                key = (lab_name, group_number, lab_date)
                if key in checkLab:
                    break
                else:
                    checkLab[key] = group_number
                    message = f"–ó–∞–ø–∏—Å—å –µ—â–µ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞.\n{lab_name}\t–ì—Ä—É–ø–ø–∞: {group_number}\t {lab_date}"
                    bot.send_message(chat_id="-4036713338", text=message)


def register_to_queue(call):
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:')

    try:
        connection = sqlite3.connect(r"QueueDatabase.db")
    except Error as e:
        bot.send_message(call.message.chat.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤')
        return

    result = connection.execute(f'select * from LabTable;')
    labs_list = result.fetchall()

    subject_info = """
| ID | –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ | –ü–æ–¥–≥—Ä—É–ø–ø–∞ |
===================================
"""

    for i in range(len(labs_list)):
        subject_info += f"| {labs_list[i][0]: <{3}}"
        subject_info += f"| {labs_list[i][1]: <{30}}|"
        subject_info += f" {labs_list[i][2]: ^{10}}|\n"
        # print(subject_info)
    bot.send_message(call.message.chat.id, subject_info)


bot.polling(none_stop=True, interval=0)

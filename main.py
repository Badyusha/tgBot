import telebot
from telebot import types
import sqlite3
from sqlite3 import Error

bot = telebot.TeleBot('6708440193:AAHwhUWSbhwvtKwnU6kHkM8cpNEGfjoyvSQ')

global surname
global connection


# –∑–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–¥–µ—Ç —é–∑–µ—Ä
@bot.message_handler(content_types=['text'])
def start(message):
    text = message.text

    try:
        connection = sqlite3.connect(r"QueueDatabase.db")
    except Error as e:
        bot.send_message(message.from_user.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤')
    
    result = connection.execute(f'select ID from UserTable where ID = { message.from_user.id };')

    if result.fetchall().__len__() != 0 and text == '/start': # if user with this id already exists 
        bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        bot.register_next_step_handler(message, menu(message)) # redirect to (main) menu
        return

    if text == '/start':
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")
        bot.register_next_step_handler(message, get_surname) #—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name
    else:
        bot.send_message(message.from_user.id, '–ù–µ –ø–æ–Ω ü§®')


def get_surname(message):
    surname = message.text

    try:
        connection.execute(f"""
            insert into UserTable(ID, Surname)
            values({ message.from_user.id }, '{surname}');
        """)

        connection.commit()
    except Error as e:
        bot.send_message(message.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–Ω–µ—Å—Ç–∏ –≤–∞—Å –≤ –ë–î, –ø–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ–≤")

    bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


def menu(message):
    keyboard = types.InlineKeyboardMarkup(); #–Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

    on_record_key = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–¥–∞—á—É', callback_data='on_record') #–∫–Ω–æ–ø–∫–∞
    keyboard.add(on_record_key) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    on_delete_key= types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏', callback_data='on_delete')
    keyboard.add(on_delete_key)

    on_output_key= types.InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏', callback_data='on_output')
    keyboard.add(on_output_key)

    question = '–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å–æ –º–Ω–æ–π:'
    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "on_record":
        bot.send_message(call.message.chat.id, '–ó–∞–ø–æ–º–Ω—é : )')
    elif call.data == "on_delete":
        print('—Ç—É—Ç –µ–≥–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç')
    elif call.data == 'on_output':
        print('—Ç—É—Ç –¥–∞—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')


bot.polling(none_stop=True, interval=0)